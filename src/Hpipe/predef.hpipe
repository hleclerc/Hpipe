# char sets
any       = 0 .. 255 # Any character in the alphabet.
ascii     = 0 .. 127 # Ascii characters. 0..127
extend    = 0 .. 255 # Ascii extended characters. This is the range -128..127 for signed alphabets and the range 0..255 for unsigned alphabets.
lower     = 'a' .. 'z' # Lowercase characters. [a-z]
upper     = 'A' .. 'Z' # Uppercase characters. [A-Z]
digit     = '0' .. '9' # Digits. [0-9]
alpha     = upper | lower # Alphabetic characters. [A-Za-z]
alnum     = digit | alpha # Alpha numerics. [0-9A-Za-z]
xdigit    = digit | 'A' .. 'F' | 'a' .. 'f' # Hexadecimal digits. [0-9A-Fa-f]
cntrl     = 0 .. 31 # Control characters. 0..31
graph     = '!' .. '~' # Graphical characters. [!-~]
print     = ' ' .. '~' # Printable characters. [ -~]
punct     = '!' .. '/' | ':' .. '@' | ']' .. '`' | '{' .. '~' # Punctuation. Graphical characters that are not alphanumerics.
null      = 0
tab       = 9  # tabulation
lf        = 10 # line feed
vert_tab  = 11 # vertical tab
ff        = 12 # form feed
cr        = 13 # carriage return
eol       = cr? lf # unix or window$ end line
space     = tab | lf | vert_tab | ff | cr | ' ' # [\\t\\v\\f\\n\\r ]
hspace    = tab | ' ' # [\\t\\v\\f\\n\\r ]
zlen      = '' # Zero length string
base64    = alnum | '+' | '/' | '='
backslash = '\'
end       = { end: inp_cont = &&end; return false; } any** #

any_utf8  = ( 0 .. 127 ) |
            ( 128 .. 223 any ) |
            ( 224 .. 239 any any ) |
            ( 240 .. 255 any any any )

# mandatory arg: val (e.g. uint[ content_length ])
uint[ val, type = 'unsigned long' ] =
    add_attr[ 'type val;' 'HPIPE_DATA.val = 0' ]
    digit { HPIPE_DATA.val = *data - '0'; }
    ( digit { HPIPE_DATA.val = 10 * HPIPE_DATA.val + ( *data - '0' ); } )**

# print a char
p[ msg = '' ] =
    add_prel[ '
        #ifdef SIPE_MAIN
        #include <iostream>
        #endif // SIPE_MAIN
    ' ]
    { std::cout << "msg" << std::endl; }

# print "val -> $HPIPE_DATA.val"
i[ val ] =
    add_prel[ '
        #ifdef SIPE_MAIN
        #include <iostream>
        #endif // SIPE_MAIN
    ' ]
    { std::cout << "val -> '" << HPIPE_DATA.val << "'" << std::endl; }

# print a value (by default, print current char)
d[ __val__ ] =
    add_prel[ '
        #ifdef SIPE_MAIN
        #include <iostream>
        #endif // SIPE_MAIN
    ' ]
    { std::cout << HPIPE_DATA.__val__; }

# print a value (by default, print current char)
c =
    add_prel[ '
        #ifdef SIPE_MAIN
        #include <iostream>
        #endif // SIPE_MAIN
    ' ]
    { std::cout << *data; }

# get a word stored in var should be followed by a stoping condition (e.g. ' ')
word[ __var__, __type__ = 'std::string' ] =
    add_prel[ '
        #ifdef SIPE_MAIN
        #include <string>
        #endif // SIPE_MAIN
    ' ]
    add_attr[ '__type__ __var__;' ]
    { HPIPE_DATA.__var__.clear(); }
    ( any { HPIPE_DATA.__var__ += *data; } )*

# a word, without __end__ char (no need for any stop condition).
eword[ __var__, __end__ ] =
    add_attr[ 'std::string __var__;' ]
    { HPIPE_DATA.__var__.clear(); }
    ( any - '__end__' { HPIPE_DATA.__var__ += *data; } )**


# read binary int little endian
uint8_bin_le[ __val__ ] =
    add_attr[ 'unsigned char __val__;' 'HPIPE_DATA.__val__ = 0;' ]
    any { HPIPE_DATA.__val__  = *reinterpret_cast<const unsigned char *>( data ) <<  0; }

# read binary int little endian
uint16_bin_le[ __val__ ] =
    add_attr[ 'unsigned short __val__;' 'HPIPE_DATA.__val__ = 0;' ]
    any { HPIPE_DATA.__val__  = *reinterpret_cast<const unsigned char *>( data ) <<  0; }
    any { HPIPE_DATA.__val__ += *reinterpret_cast<const unsigned char *>( data ) <<  8; }

# read binary int little endian
uint32_bin_le[ __val__ ] =
    add_attr[ 'unsigned __val__;' 'HPIPE_DATA.__val__ = 0;' ]
    any { HPIPE_DATA.__val__  = *reinterpret_cast<const unsigned char *>( data ) <<  0; }
    any { HPIPE_DATA.__val__ += *reinterpret_cast<const unsigned char *>( data ) <<  8; }
    any { HPIPE_DATA.__val__ += *reinterpret_cast<const unsigned char *>( data ) << 16; }
    any { HPIPE_DATA.__val__ += *reinterpret_cast<const unsigned char *>( data ) << 24; }

# read binary int little endian
uint64_bin_le[ __val__, __type__ = 'quint64' ] =
    add_attr[ '__type__ __val__;' 'HPIPE_DATA.__val__ = 0;' ]
    any { HPIPE_DATA.__val__  = (__type__)*reinterpret_cast<const unsigned char *>( data ) <<  0; }
    any { HPIPE_DATA.__val__ += (__type__)*reinterpret_cast<const unsigned char *>( data ) <<  8; }
    any { HPIPE_DATA.__val__ += (__type__)*reinterpret_cast<const unsigned char *>( data ) << 16; }
    any { HPIPE_DATA.__val__ += (__type__)*reinterpret_cast<const unsigned char *>( data ) << 24; }
    any { HPIPE_DATA.__val__ += (__type__)*reinterpret_cast<const unsigned char *>( data ) << 32; }
    any { HPIPE_DATA.__val__ += (__type__)*reinterpret_cast<const unsigned char *>( data ) << 40; }
    any { HPIPE_DATA.__val__ += (__type__)*reinterpret_cast<const unsigned char *>( data ) << 48; }
    any { HPIPE_DATA.__val__ += (__type__)*reinterpret_cast<const unsigned char *>( data ) << 56; }

# read binary int little endian
int64_bin_le[ __val__, __type__ = 'qint64' ] =
    add_attr[ '__type__ __val__;' 'HPIPE_DATA.__val__ = 0;' ]
    any { HPIPE_DATA.__val__  = (__type__)*reinterpret_cast<const unsigned char *>( data ) <<  0; }
    any { HPIPE_DATA.__val__ += (__type__)*reinterpret_cast<const unsigned char *>( data ) <<  8; }
    any { HPIPE_DATA.__val__ += (__type__)*reinterpret_cast<const unsigned char *>( data ) << 16; }
    any { HPIPE_DATA.__val__ += (__type__)*reinterpret_cast<const unsigned char *>( data ) << 24; }
    any { HPIPE_DATA.__val__ += (__type__)*reinterpret_cast<const unsigned char *>( data ) << 32; }
    any { HPIPE_DATA.__val__ += (__type__)*reinterpret_cast<const unsigned char *>( data ) << 40; }
    any { HPIPE_DATA.__val__ += (__type__)*reinterpret_cast<const unsigned char *>( data ) << 48; }
    any { HPIPE_DATA.__val__ += (__type__)*reinterpret_cast<const unsigned char *>( data ) << 56; }

# read a string (in __val__) of fixed length __len__
str_sized[ __val__, __len__, __type__ = "std::string" ] =
    add_attr[ '__type__ __val__;' ]
    add_attr[ 'int __val___rem;' ]
    {
        HPIPE_DATA.__val___rem = __len__;
        HPIPE_DATA.__val__.clear();
        HPIPE_DATA.__val__.reserve( __len__ );
    jmp_rd___val__$$$uid$$$:
        if ( not HPIPE_DATA.__val___rem )
            goto end_rd___val__$$$uid$$$;
        if ( ++data >= end ) {
            HPIPE_DATA._inp_cont = &&cnt_rd___val__$$$uid$$$;
            return 0;
        }
    cnt_rd___val__$$$uid$$$:
            HPIPE_DATA.__val__ += *data;
            --HPIPE_DATA.__val___rem;
            goto jmp_rd___val__$$$uid$$$;
    end_rd___val__$$$uid$$$: ;
    }

# read size 32 bits then data
str_32[ __len__ = 'len', __str__ = 'str' ] =
    uint32_bin_le[ '__len__' ]
    str_sized[ __str__, 'HPIPE_DATA.__len__' ]
